generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  CV        CV[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model CV {
  id     String @id @default(cuid())
  userId String

  // File information
  filename     String
  originalName String
  fileUrl      String
  fileSize     Int
  mimeType     String @default("application/pdf")

  // Processing status
  status CVStatus @default(UPLOADED)

  // Extracted content
  extractedText String? @db.Text

  // Timestamps
  uploadedAt  DateTime  @default(now())
  processedAt DateTime?
  updatedAt   DateTime  @updatedAt

  // Relations
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis      CVAnalysis?
  processingLog CVProcessingLog[]
}

model CVAnalysis {
  id   String @id @default(cuid())
  cvId String @unique

  // Individual scores (0-100)
  experienceScore Int
  educationScore  Int
  skillsScore     Int

  // Overall score (average of above)
  overallScore Int

  // Detailed analysis from AI
  experienceAnalysis String? @db.Text
  educationAnalysis  String? @db.Text
  skillsAnalysis     String? @db.Text
  overallFeedback    String? @db.Text

  // Key extracted information
  yearsOfExperience Int?
  educationLevel    String?
  keySkills         String[]
  jobTitles         String[]
  companies         String[]

  // AI processing metadata
  aiModel        String?
  processingTime Int?
  tokensUsed     Int?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)
}

// Processing status enum
enum CVStatus {
  UPLOADED // File uploaded but not processed
  PROCESSING // Currently being analyzed
  COMPLETED // Analysis finished successfully
  FAILED // Processing failed
  RETRY // Queued for retry after failure
}

model CVProcessingLog {
  id        String   @id @default(cuid())
  cvId      String
  status    CVStatus
  message   String?  @db.Text
  error     String?  @db.Text
  timestamp DateTime @default(now())

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@index([cvId])
  @@index([timestamp])
}
